"""Add notification tables

Revision ID: 002
Revises: 001
Create Date: 2024-01-02 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '002'
down_revision = '001'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if tables exist before creating them
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    existing_tables = inspector.get_table_names()
    
    # Create notifications table if it doesn't exist
    if 'notifications' not in existing_tables:
        op.create_table('notifications',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('notification_type', sa.String(50), nullable=False),
            sa.Column('channel', sa.String(20), nullable=False),
            sa.Column('title', sa.String(200), nullable=False),
            sa.Column('message', sa.Text(), nullable=False),
            sa.Column('data', sa.JSON(), nullable=True),
            sa.Column('status', sa.String(20), nullable=False, default='pending'),
            sa.Column('sent_at', sa.DateTime(), nullable=True),
            sa.Column('read_at', sa.DateTime(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('updated_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    # Create notification_preferences table if it doesn't exist
    if 'notification_preferences' not in existing_tables:
        op.create_table('notification_preferences',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('in_app_enabled', sa.Boolean(), nullable=False, default=True),
            sa.Column('email_enabled', sa.Boolean(), nullable=False, default=True),
            sa.Column('telegram_enabled', sa.Boolean(), nullable=False, default=False),
            sa.Column('telegram_chat_id', sa.String(100), nullable=True),
            sa.Column('telegram_username', sa.String(100), nullable=True),
            sa.Column('arbitrage_notifications', sa.Boolean(), nullable=False, default=True),
            sa.Column('price_alert_notifications', sa.Boolean(), nullable=False, default=True),
            sa.Column('system_notifications', sa.Boolean(), nullable=False, default=True),
            sa.Column('scanner_status_notifications', sa.Boolean(), nullable=False, default=True),
            sa.Column('min_profit_threshold', sa.Float(), nullable=False, default=0.5),
            sa.Column('max_notifications_per_hour', sa.Integer(), nullable=False, default=10),
            sa.Column('quiet_hours_start', sa.Time(), nullable=True),
            sa.Column('quiet_hours_end', sa.Time(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('updated_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('user_id')
        )
    
    # Check if columns exist before adding them to notification_settings table
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    existing_columns = [col['name'] for col in inspector.get_columns('notification_settings')]
    
    columns_to_add = {
        'in_app_enabled': sa.Column('in_app_enabled', sa.Boolean(), nullable=True, default=True),
        'telegram_username': sa.Column('telegram_username', sa.String(100), nullable=True),
        'arbitrage_notifications': sa.Column('arbitrage_notifications', sa.Boolean(), nullable=True, default=True),
        'price_alert_notifications': sa.Column('price_alert_notifications', sa.Boolean(), nullable=True, default=True),
        'system_notifications': sa.Column('system_notifications', sa.Boolean(), nullable=True, default=True),
        'scanner_status_notifications': sa.Column('scanner_status_notifications', sa.Boolean(), nullable=True, default=True),
        'min_profit_threshold': sa.Column('min_profit_threshold', sa.Float(), nullable=True, default=0.5),
        'max_notifications_per_hour': sa.Column('max_notifications_per_hour', sa.Integer(), nullable=True, default=10),
        'quiet_hours_start': sa.Column('quiet_hours_start', sa.Time(), nullable=True),
        'quiet_hours_end': sa.Column('quiet_hours_end', sa.Time(), nullable=True)
    }
    
    # Only add columns that don't exist
    with op.batch_alter_table('notification_settings', schema=None) as batch_op:
        for col_name, col_def in columns_to_add.items():
            if col_name not in existing_columns:
                batch_op.add_column(col_def)
    
    # Set default values for existing records
    op.execute("UPDATE notification_settings SET in_app_enabled = 1 WHERE in_app_enabled IS NULL")
    op.execute("UPDATE notification_settings SET arbitrage_notifications = 1 WHERE arbitrage_notifications IS NULL")
    op.execute("UPDATE notification_settings SET price_alert_notifications = 1 WHERE price_alert_notifications IS NULL")
    op.execute("UPDATE notification_settings SET system_notifications = 1 WHERE system_notifications IS NULL")
    op.execute("UPDATE notification_settings SET scanner_status_notifications = 1 WHERE scanner_status_notifications IS NULL")
    op.execute("UPDATE notification_settings SET min_profit_threshold = 0.5 WHERE min_profit_threshold IS NULL")
    op.execute("UPDATE notification_settings SET max_notifications_per_hour = 10 WHERE max_notifications_per_hour IS NULL")
    
    # Update UserNotification table to align with new structure
    # Check existing columns in user_notifications table
    inspector = sa.inspect(op.get_bind())
    existing_user_notif_columns = [col['name'] for col in inspector.get_columns('user_notifications')]
    
    user_notif_columns_to_add = {
        'notification_type': sa.Column('notification_type', sa.String(50), nullable=True),
        'channel': sa.Column('channel', sa.String(20), nullable=True),
        'title': sa.Column('title', sa.String(200), nullable=True),
        'message': sa.Column('message', sa.Text(), nullable=True),
        'data': sa.Column('data', sa.JSON(), nullable=True),
        'read_at': sa.Column('read_at', sa.DateTime(), nullable=True)
    }
    
    with op.batch_alter_table('user_notifications', schema=None) as batch_op:
        for col_name, col_def in user_notif_columns_to_add.items():
            if col_name not in existing_user_notif_columns:
                batch_op.add_column(col_def)
    
    # Set default values for existing UserNotification records
    op.execute("UPDATE user_notifications SET notification_type = 'arbitrage_opportunity' WHERE notification_type IS NULL")
    op.execute("UPDATE user_notifications SET channel = 'in_app' WHERE channel IS NULL")
    op.execute("UPDATE user_notifications SET title = 'Arbitrage Opportunity' WHERE title IS NULL")
    op.execute("UPDATE user_notifications SET message = 'New arbitrage opportunity detected' WHERE message IS NULL")
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop new tables
    op.drop_table('notification_preferences')
    op.drop_table('notifications')
    
    # Remove added columns from notification_settings
    with op.batch_alter_table('notification_settings', schema=None) as batch_op:
        batch_op.drop_column('quiet_hours_end')
        batch_op.drop_column('quiet_hours_start')
        batch_op.drop_column('max_notifications_per_hour')
        batch_op.drop_column('min_profit_threshold')
        batch_op.drop_column('scanner_status_notifications')
        batch_op.drop_column('system_notifications')
        batch_op.drop_column('price_alert_notifications')
        batch_op.drop_column('arbitrage_notifications')
        batch_op.drop_column('telegram_username')
        batch_op.drop_column('in_app_enabled')
    
    # Remove added columns from user_notifications
    with op.batch_alter_table('user_notifications', schema=None) as batch_op:
        batch_op.drop_column('read_at')
        batch_op.drop_column('data')
        batch_op.drop_column('message')
        batch_op.drop_column('title')
        batch_op.drop_column('channel')
        batch_op.drop_column('notification_type')
    
    # ### end Alembic commands ###